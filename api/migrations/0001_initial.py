# Generated by Django 4.2.3 on 2024-05-16 13:58

import api.models.video
import datetime
import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CameraConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Recognizable unique name for the camera configuration', max_length=100)),
                ('camera_config', models.JSONField(blank=True, help_text='JSON fields containing a camera configuration, see https://localdevices.github.io/pyorc/user-guide/camera_config/index.html for setup instructions', null=True)),
                ('allowed_dt', models.DurationField(default=datetime.timedelta(seconds=1800), help_text='Maximum time difference allowed between a time stamp of an associated video, and a time series instance at the associated site [sec]', validators=[django.core.validators.MinValueValidator(datetime.timedelta(0)), django.core.validators.MaxValueValidator(datetime.timedelta(days=1))], verbose_name='Allowed difference in time stamp')),
                ('start_date', models.DateTimeField(auto_now_add=True, verbose_name='start validity date')),
                ('end_date', models.DateTimeField(null=True, verbose_name='end validity date')),
                ('version', models.CharField(blank=True, default='0.5.3', editable=False, max_length=15, verbose_name='pyORC version compatibility')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.UUIDField(help_text='Unique identifier of device', primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Name of device', max_length=250)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Creation date time')),
                ('operating_system', models.TextField(help_text='Operating system', null=True)),
                ('processor', models.TextField(help_text='Processor', null=True)),
                ('memory', models.FloatField(help_text='Memory GB', null=True)),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'Healthy'), (1, 'Low voltage'), (2, 'Low storage'), (3, 'Critical storage')], default=0)),
                ('form_status', models.PositiveSmallIntegerField(choices=[(0, 'No form'), (1, 'Valid form'), (2, 'Invalid form'), (3, 'Broken form')], default=0)),
                ('message', models.TextField(help_text='Message from the device, e.g. indicating info on errors', null=True)),
                ('last_seen', models.DateTimeField(default=django.utils.timezone.now, help_text='Last seen online')),
                ('ip_address', models.GenericIPAddressField(help_text='IP-address of last online occurrence', null=True)),
                ('nodeorc_version', models.CharField(help_text='Installed version of NodeORC', max_length=10)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Recognizable unique name for your profile', max_length=100)),
                ('data', models.JSONField(help_text='GeoJSON fields containing Point (x,y,z) geometries that encompass a cross section')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='survey date')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of project', max_length=100)),
                ('description', models.TextField(help_text='Summary of the project details, e.g. sites, client, purpose, intended outcome')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Recognizable unique name for your recipe', max_length=100)),
                ('data', models.JSONField(help_text='JSON formatted recipe for processing videos. See https://localdevices.github.io/pyorc/user-guide/cli.html')),
                ('version', models.CharField(blank=True, default='0.5.3', editable=False, max_length=15)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Server',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Recognizable unique name for your server', max_length=100)),
                ('type', models.PositiveSmallIntegerField(choices=[(1, 'FTP'), (2, 'ODK Collect')], default=1)),
                ('url', models.URLField(help_text='URL of server including port number, in the form of <your-protocol>://<your-server-name>:<your-port-nr> e.g. ftp://liveopenrivercam.com:2345', max_length=254)),
                ('end_point', models.CharField(help_text='End point of server, where files are stored, e.g. "videos" would result in scraping from <your-protocol>://<your-server-name>:<your-port-nr>/videos', max_length=254)),
                ('wildcard', models.CharField(default='*', help_text='Wildcard to use to look for (new) files', max_length=100)),
                ('token', models.CharField(blank=True, help_text='Access token to site', max_length=254, null=True)),
                ('username', models.CharField(blank=True, help_text='Your user name', max_length=100, null=True)),
                ('password', models.CharField(blank=True, help_text='Your password', max_length=100, null=True)),
                ('frequency', models.DurationField(help_text='Amount of seconds')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Recognizable unique name for your site', max_length=100)),
                ('geom', django.contrib.gis.db.models.fields.PointField(help_text='Approximate location of the site', srid=4326, verbose_name='Location')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifier of task as stored by RabbitMQ messaging service', primary_key=True, serialize=False, unique=True)),
                ('pending_action', models.PositiveSmallIntegerField(choices=[(0, 'Start'), (1, 'Cancel'), (2, 'Remove'), (3, 'Restart')], default=0)),
                ('public', models.BooleanField(default=False)),
                ('progress', models.FloatField(blank=True, default=0.0, help_text='Value between 0 and 1 indicating the progress of the task')),
                ('task_body', models.JSONField(default=dict, help_text='task body used to perform task by available node.')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TaskForm',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifier of task form as stored on both LiveORC and NodeORC side', primary_key=True, serialize=False, unique=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Date and time on which task form record is created')),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'New'), (1, 'Sent'), (2, 'Rejected'), (3, 'Accepted'), (6, 'Broken')], default=0)),
                ('task_body', models.JSONField(default=dict, help_text='task body used to perform task by available node.')),
                ('message', models.TextField(help_text='message from device about status in case of error', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TimeSeries',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(help_text='Date and time of water level value')),
                ('h', models.FloatField(blank=True, help_text='Value of water level in meter, referenced against local datum [m]', null=True, verbose_name='Water level')),
                ('q_05', models.FloatField(blank=True, help_text='River flow with probability of non-exceedance of 5% [m3/s]', null=True, verbose_name='Discharge 5%')),
                ('q_25', models.FloatField(blank=True, help_text='River flow with probability of non-exceedance of 25% [m3/s]', null=True, verbose_name='Discharge 25%')),
                ('q_50', models.FloatField(blank=True, help_text='Median river flow', null=True, verbose_name='Discharge median')),
                ('q_75', models.FloatField(blank=True, help_text='River flow with probability of non-exceedance of 75% [m3/s]', null=True, verbose_name='Discharge 75%')),
                ('q_95', models.FloatField(blank=True, help_text='River flow with probability of non-exceedance of 95% [m3/s]', null=True, verbose_name='Discharge 95%')),
                ('wetted_surface', models.FloatField(blank=True, help_text='Wetted surface area with given water level [m2]', null=True)),
                ('wetted_perimeter', models.FloatField(blank=True, help_text='Wetted perimeter with given water level [m]', null=True)),
                ('fraction_velocimetry', models.FloatField(blank=True, help_text='Fraction of discharge resolved using velocimetry [-]', null=True)),
            ],
            options={
                'verbose_name_plural': 'time series',
            },
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, help_text='Date and time on which video record is created')),
                ('timestamp', models.DateTimeField(help_text="Data and time on which video was taken. If not provided by the user, this is taken from the file's time stamp")),
                ('file', models.FileField(null=True, storage=api.models.video.select_storage, upload_to=api.models.video.get_video_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['MOV', 'MKV', 'MP4', 'AVI', 'M4V'])])),
                ('keyframe', models.ImageField(editable=False, help_text='Extracted frame for user contextual understanding or for making camera configurations', max_length=254, storage=api.models.video.select_storage, upload_to=api.models.video.get_keyframe_path)),
                ('image', models.ImageField(help_text='Image showing the results of a velocimetry analysis', null=True, storage=api.models.video.select_storage, upload_to=api.models.video.get_video_path)),
                ('thumbnail', models.ImageField(editable=False, help_text='Thumbnail frame for list views', storage=api.models.video.select_storage, upload_to=api.models.video.get_thumb_path)),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'New video'), (2, 'Waiting for processing'), (3, 'Being processed'), (4, 'Finished'), (5, 'Error occurred')], default=1, help_text='Status of processing')),
                ('camera_config', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.cameraconfig')),
            ],
        ),
    ]
